// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*expectAccountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExpectAccount) MarshalJSON() ([]byte, error) {
	type ExpectAccount struct {
		Code    hexutil.Bytes               `json:"code,omitempty"`
		Storage map[common.Hash]common.Hash `json:"storage,omitempty"`
		Balance *math.HexOrDecimal256       `json:"balance"`
		Nonce   math.HexOrDecimal64         `json:"nonce,omitempty"`
	}
	var enc ExpectAccount
	enc.Code = e.Code
	enc.Storage = e.Storage
	enc.Balance = (*math.HexOrDecimal256)(e.Balance)
	enc.Nonce = math.HexOrDecimal64(e.Nonce)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExpectAccount) UnmarshalJSON(input []byte) error {
	type ExpectAccount struct {
		Code    *hexutil.Bytes              `json:"code,omitempty"`
		Storage map[common.Hash]common.Hash `json:"storage,omitempty"`
		Balance *math.HexOrDecimal256       `json:"balance"`
		Nonce   *math.HexOrDecimal64        `json:"nonce,omitempty"`
	}
	var dec ExpectAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Code != nil {
		e.Code = *dec.Code
	}
	if dec.Storage != nil {
		e.Storage = dec.Storage
	}
	if dec.Balance != nil {
		e.Balance = (*big.Int)(dec.Balance)
	}
	if dec.Nonce != nil {
		e.Nonce = uint64(*dec.Nonce)
	}
	return nil
}
